Building a recommender system using a dataset of properties involves several key steps. Here's a general approach you can take before deploying it to your AWS cloud:

Understand Your Data: Before anything else, ensure you understand the data you have. This includes knowing the types of properties, attributes of each property (like location, size, price, etc.), and any user interactions or ratings if available.

Data Preprocessing: Clean and preprocess your data. This involves handling missing values, encoding categorical data, normalizing or scaling numerical values, and potentially creating new features that might be useful for recommendations.

Choose a Recommender System Type:

Collaborative Filtering: This method makes automatic predictions about the interests of a user by collecting preferences from many users. It's useful if you have user interaction data.
Content-Based Filtering: This approach uses item features to recommend additional items similar to what the user likes, based on their previous actions or explicit feedback.
Hybrid Methods: Combining collaborative and content-based methods can often yield more accurate recommendations.
Model Development:

Choose an appropriate algorithm based on the type of recommender system you've decided on. Common algorithms include k-nearest neighbors (KNN), matrix factorization techniques like Singular Value Decomposition (SVD), and neural networks.
Split your data into training and testing sets to validate the performance of your model.
Evaluation: Use metrics like RMSE (Root Mean Square Error), precision, recall, or F1 score to evaluate the performance of your model on the test data.

Optimization and Tuning: Optimize your model by tuning hyperparameters. You might also want to explore feature engineering to improve performance.

User Interface: Plan how the recommendations will be presented to the users. The interface should be user-friendly and relevant to the context.

Deployment Considerations:

Ensure your model is scalable and can handle the load once deployed on AWS.
Consider using AWS services like Amazon S3 for data storage, Amazon EC2 or AWS Lambda for computation, and AWS RDS or DynamoDB for database management.
Monitoring and Updating: Once deployed, continuously monitor the system's performance and update the model as needed. This might involve retraining with new data or adjusting the model to handle changes in user behavior.

Ethical and Privacy Considerations: Ensure that your system adheres to privacy laws and ethical guidelines, especially if you're using user data for recommendations.