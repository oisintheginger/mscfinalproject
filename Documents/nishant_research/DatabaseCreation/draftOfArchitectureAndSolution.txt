Architecture and deployment issues and solutions
1. Priority of Performance
Delivering a high-performing application is crucial since poor performance negatively affects user retention.

Solution:

Scalability: We made sure that our architecture enables dynamic resource scaling and upkeep to meet changing user demands.
Security: Systems for robust authentication and authorization that are integrated, guarding user data and preventing unauthorised access.
Monitoring: AWS CloudWatch was set up to track performance in real-time, enabling proactive problem detection and resolving.
Testing: To find and fix possible bottlenecks before they have an impact on the end user, continuous testing approaches have been adopted.
2. Managing a responsive and reliable database system, particularly when dealing with fluctuating loads and guaranteeing data consistency.

Solution:

Resource Allocation: Used the cost-effective MySQL t2.micro instance, which required optimisation to perform database operations well.
Leveraging Lambda functions for database auto-shutdown during extended idleness helped reduce unnecessary costs through automated management.
Data Migration: To enable data uploads from CSV files, AWS's S3 buckets were used, guaranteeing quick and safe data transfers.
Operating within a budget, particularly considering the limitations of an MSc project, is the third cost management challenge.

Solution:

Utilised the student free tier of Amazon Web Services, which was ideal for the project's needs.
Active Monitoring: Constructed a mechanism to alert the team of potential budget overruns using AWS billing alerts and budgeting tools.
4. Learning Curve and Technology Familiarity Challenge: Due to the team's diversity in expertise levels, advanced technologies could impede progress.

Solution:

Deployment Simplified: AWS Amplify and Lambda were selected due to their ease of use, allowing for quick development and deployment.
User authentication and authorization: Instead of having to create intricate backend authentication systems from scratch, AWS Cognito offered an out-of-the-box solution.
Incorporation and compatibility
Challenge: When working on projects with short deadlines, combining various technologies can provide unexpected difficulties.

Solution:

All components, from deployment to databases, must be contained within the AWS ecosystem to maximise compatibility and reduce integration hiccups.
Cost-Effective Approach: Expertly used AWS services to maximise the free tier, accomplishing the project's objectives without sacrificing quality.

6. Unanticipated Costs & Vendor Support Challenge: While researching database solutions, the team unintentionally racked up a $500 fee from the use of Amazon Aurora, which wasn't included in the free tier.

Solution:

Customer advocacy: As soon as we learned about the unexpected charge, we contacted AWS customer support. They not only acknowledged our predicament but also offered to pay back the mistakes.
Proactive Monitoring: To avoid future unforeseen costs, AWS support was instrumental in assisting the team in setting up CloudWatch alarms and other systems to alert us of prospective charges and resource usages that exceed our anticipated limitations.