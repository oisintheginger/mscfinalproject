openapi: 3.0.0
info:
  version: 1.0.0
  title: ""
  description: Simple API for HME group project
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/fkadir/HMEApi/1.0.0
paths:
  /api/properties:
    get:
      summary: returns a list with the first entry the total number of pages and the rest of quick view properties includes pagination as query parameters. you can clarify the page and size of the page, default values are page=0 size=50
      parameters:
        - in: query
          name: page
          required: false
          schema:
            type: integer
        - in: query
          name: size
          required: false
          schema:
            type: integer
      responses:
        "200":
          description: A list of QuickViewProperty objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/QuickViewProperty"
        "400":
          description: returns a 400 bad request response code (with a message)
        "500":
          description: returns a 500 internal server error. the body contains the specific error exception.
  /api/properties/{propertyId}:
    get:
      summary: returns quick view property of specific property id
      parameters:
        - in: path
          name: propertyId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: returns a quickviewproperty object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QuickViewProperty"
        "404":
          description: is returned when the property was not found
        "500":
          description: is returned when database access error occured
  /api/properties/details/{propertyId}:
    get:
      summary: returns details of a specific property (still placeholder data)
      parameters:
        - in: path
          name: propertyId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A DetailedPropery object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DetailedProperty"
        "400":
          description: returns a 400 bad request response code (with a message)
        "404":
          description: returns a 404 not found response code
        "500":
          description: returns a 500 internal server error. the body contains the specific error exception.
  /api/properties/locations:
    get:
      summary: returns all property ids with longitude and latitude
      responses:
        "200":
          description: returns a list with objects containing property id, longitude and latitude
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
        "500":
          description: returns a list with objects containing property id, longitude and latitude
  /api/user:
    get:
      summary: returns user info for given user id (authorisation header)
      responses:
        "200":
          description: returns user object with all their info
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"
        "404":
          description: returns a 404 user not found response code
        "401":
          description: returns 401 unauthorised request when JWT token can't be decoded or issuer is invalid or token is expired
        "500":
          description: returns a 500 internal server error, the body contains the specific error
  /api/user/{resource}:
    get:
      summary: returns specific resource for specific user id
      parameters:
        - in: path
          name: resource
          required: true
          schema:
            type: string
          example: options are w (weights), f (favourites), s (searches), a (applications)
      responses:
        "200":
          description: returns user resources
          content:
            application/json:
              schema:
                type: array
        "400":
          description: returns 400 bad request if the type of resource is not correctly put in
        "401":
          description: returns 401 unauthorised request when JWT token can't be decoded or issuer is invalid or token is expired
        "404":
          description: returns a 404 resource not found response code
        "500":
          description: returns a 500 internal server error, the body contains the specific error
  /api/user/new/{resource}:
    post:
      summary: creates new specific resource for specific user
      parameters:
        - in: path
          name: resource
          required: true
          schema:
            type: string
            example: options are w (weights), f (favourites), s (searches), a (applications)
        - in: query
          name: search string
          required: false
          schema:
            type: string
        - in: query
          name: propertyId
          required: false
          schema:
            type: string
        - in: query
          name: message
          required: false
          schema:
            type: string
        - in: query
          name: entertainment
          required: false
          schema:
            type: string
        - in: query
          name: pharmacies
          required: false
          schema:
            type: string
        - in: query
          name: retail
          required: false
          schema:
            type: string
        - in: query
          name: fitness
          required: false
          schema:
            type: string
        - in: query
          name: financial
          required: false
          schema:
            type: string
        - in: query
          name: transportation
          required: false
          schema:
            type: string
        - in: query
          name: emergency
          required: false
          schema:
            type: string
      responses:
        "200":
          description: adds new user resource, returns 200 ok and message
        "401":
          description: returns 401 unauthorised request when JWT token can't be decoded or issuer is invalid or token is expired
        "400":
          description: returns 400 bad request if the type of resource is not correctly put in
        "404":
          description: returns a 404 resource not found response code
        "500":
          description: returns a 500 internal server error, the body contains the specific error
  /api/user/update/email:
    patch:
      summary: updates users email address for cognito and user table
      parameters:
        - in: query
          name: email
          required: true
          schema:
            type: string
      responses:
        "200":
          description: returns 200 OK response with message
        "400":
          description: returns 400 bad request with message
        "401":
          description: returns 401 unauthorised request when JWT token can't be decoded or issuer is invalid or token is expired
        "404":
          description: returns 404 not found with message
        "500":
          description: returns 500 internal server error with specific error in the body
  /api/user/update/{resource}:
    patch:
      summary: updates a search or weights for a specific user
      parameters:
        - in: path
          name: resource
          required: true
          schema:
            type: string
            example: options are w (weights), f (favourites), s (searches), a (applications)
        - in: query
          name: search string
          required: false
          schema:
            type: string
        - in: query
          name: newSearch string
          required: false
          schema:
            type: string
        - in: query
          name: entertainment
          required: false
          schema:
            type: string
        - in: query
          name: pharmacies
          required: false
          schema:
            type: string
        - in: query
          name: retail
          required: false
          schema:
            type: string
        - in: query
          name: fitness
          required: false
          schema:
            type: string
        - in: query
          name: financial
          required: false
          schema:
            type: string
        - in: query
          name: transportation
          required: false
          schema:
            type: string
        - in: query
          name: emergency
          required: false
          schema:
            type: string
      responses:
        "200":
          description: returns 200 OK response with message
        "400":
          description: returns 400 bad request with message
        "401":
          description: returns 401 unauthorised request when JWT token can't be decoded or issuer is invalid or token is expired
        "404":
          description: returns 404 not found with message
        "500":
          description: returns 500 internal server error with specific error in the body
  /api/user/remove/{resource}:
    delete:
      summary: removes user's resource
      parameters:
        - in: path
          name: resource
          required: true
          schema:
            type: string
            example: options are w (weights), f (favourites), s (searches)
        - in: query
          name: search string
          required: false
          schema:
            type: string
        - in: query
          name: propertyId
          required: false
          schema:
            type: string
      responses:
        "200":
          description: returns 200 OK response with message
        "400":
          description: returns 400 bad request with message
        "401":
          description: returns 401 unauthorised request when JWT token can't be decoded or issuer is invalid or token is expired
        "404":
          description: returns 404 not found with message
        "500":
          description: returns 500 internal server error with specific error in the body
  /api/user/remove:
    delete:
      summary: removes user from cognito and user table
      responses:
        "200":
          description: returns 200 OK response with message
        "400":
          description: returns 400 bad request with message
        "401":
          description: returns 401 unauthorised request when JWT token can't be decoded or issuer is invalid or token is expired
        "404":
          description: returns 404 not found with message
        "500":
          description: returns 500 internal server error with specific error in the body

components:
  schemas:
    QuickViewProperty:
      type: object
      required:
        - propertyId
        - geolocation
        - price
        - bathrooms
        - bedrooms
        - streetAddress
        - zipcode
        - description
        - images
      properties:
        id:
          type: integer
          format: int64
          example: 123456
        longitude:
          type: number
        latitude:
          type: number
        price:
          type: number
        bathrooms:
          type: integer
        bedrooms:
          type: integer
        streetAddress:
          type: string
        zipcode:
          type: string
        overview:
          type: string
        images:
          type: array
          items:
            type: string
    DetailedProperty:
      description: Details implemented right now in the mock data
      type: object
      required:
        - id
      properties:
        id:
          type: integer
          format: int64
          example: 123456
        price:
          type: number
        bedrooms:
          type: integer
        bathrooms:
          type: integer
        propertyType:
          type: string
          example: apartment
        address:
          type: string
          example: 1424 Karen Spur
        zipcode:
          type: string
        longitude:
          type: string
        latitude:
          type: string
        full_description:
          type: string
        petsAllowed:
          type: boolean
        lastUpdated:
          type: array
          items:
            type: integer
          example: [2023, 8, 30]
        datePosted:
          type: array
          items:
            type: integer
          example: [2023, 8, 30]
        TBDScore:
          type: number
        images:
          type: array
          items:
            type: string
    user:
      description: user details available in user table
      type: object
      required:
        - id
        - email
      properties:
        id:
          type: string
        email:
          type: string
        searches:
          type: array
          items:
            type: object
        favourites:
          type: array
          items:
            type: object
        weights:
          type: object
        applications:
          type: array
          items:
            type: object
