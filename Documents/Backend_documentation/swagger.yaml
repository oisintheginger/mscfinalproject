openapi: 3.0.0
info:
  version: 1.0.0
  title: ""
  description: Simple API for HME group project
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/fkadir/HMEApi/1.0.0
paths:
  /api/properties:
    get:
      summary: returns a list of properties includes pagination as query parameters. you can clarify the page and size of the page, default values are page=0 size=50
      parameters:
        - in: query
          name: page
          required: false
          schema:
            type: integer
        - in: query
          name: size
          required: false
          schema:
            type: integer
      responses:
        "200":
          description: A list of QuickViewProperty objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/QuickViewProperty"
        "400":
          description: returns a 400 bad request response code (with a message)
        "500":
          description: returns a 500 internal server error. the body contains the specific error exception.

  /api/properties/{propertyId}:
    get:
      summary: returns details of a specific property (still placeholder data)
      parameters:
        - in: path
          name: propertyId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A DetailedPropery object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DetailedProperty"
        "400":
          description: returns a 400 bad request response code (with a message)
        "404":
          description: returns a 404 not found response code
        "500":
          description: returns a 500 internal server error. the body contains the specific error exception.

  # /api/properties/search:
  #   get:
  #     summary: returns a list of QuickViewProperty objects
  #     parameters:
  #       - in: query
  #         name: propertyId
  #         required: false
  #         schema:
  #           type: string
  #       - in: query
  #         name: priceRange
  #         required: false
  #         schema:
  #           type: array
  #           items:
  #             type: number
  #       - in: query
  #         name: type
  #         required: false
  #         schema:
  #           type: string
  #       - in: query
  #         name: zipcode
  #         required: false
  #         schema:
  #           type: string
  #     responses:
  #       "200":
  #         description: A JSON array of QuickViewPropery objects
  #         content:
  #           application/json:
  #             schema:
  #               type: array
  #               items:
  #                 $ref: "#/components/schemas/QuickViewProperty"

  # /api/properties/{propertyId}/images:
  #   get:
  #     summary: returns JSON array of http links for property images
  #     parameters:
  #       - in: path
  #         name: propertyId
  #         required: true
  #         schema:
  #           type: array
  #           items:
  #             type: string
  #       - in: query
  #         name: QuickViewImage
  #         required: true
  #         schema:
  #           type: boolean
  #     responses:
  #       "200":
  #         description: a JSON array of image link(s)
  #         content:
  #           application/json:
  #             schema:
  #               type: array
  #               items:
  #                 type: string

  # /api/user/favourites:
  #   get:
  #     summary: retrieve all of the user's favourite properties
  #     parameters:
  #       - in: query
  #         name: userId
  #         required: true
  #         schema:
  #           type: string
  #       - in: query
  #         name: propertyId
  #         required: false
  #         schema:
  #           type: string
  #     responses:
  #       "200":
  #         description: A JSON array of QuickViewPropery objects
  #         content:
  #           application/json:
  #             schema:
  #               type: array
  #               items:
  #                 $ref: "#/components/schemas/QuickViewProperty"
  #   post:
  #     summary: create new favourite property for user
  #     parameters:
  #       - in: query
  #         name: userId
  #         required: true
  #         schema:
  #           type: string
  #       - in: query
  #         name: propertyId
  #         required: true
  #         schema:
  #           type: string
  #     responses:
  #       "201":
  #         description: resource is created
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #   delete:
  #     summary: delete favourite property for user
  #     parameters:
  #       - in: query
  #         name: userId
  #         required: true
  #         schema:
  #           type: string
  #       - in: query
  #         name: propertyId
  #         required: true
  #         schema:
  #           type: string
  #     responses:
  #       "200":
  #         description: returns confirmation message
  #         content:
  #           application/json:
  #             schema:
  #               type: object

  # /api/user/searches:
  #   get:
  #     summary: retrieve user's saved search(es)
  #     parameters:
  #       - in: query
  #         name: userId
  #         required: true
  #         schema:
  #           type: string
  #       - in: query
  #         name: searchId
  #         required: false
  #         schema:
  #           type: string
  #     responses:
  #       "200":
  #         description: returns a JSON array of saved searches
  #         content:
  #           application/json:
  #             schema:
  #               type: array
  #               items:
  #                 $ref: "#/components/schemas/SavedSearch"
  #   post:
  #     summary: creates a new saved search to a user's profile
  #     parameters:
  #       - in: query
  #         name: userId
  #         required: true
  #         schema:
  #           type: string
  #       - in: query
  #         name: much_more
  #         required: true
  #         schema:
  #           type: string
  #     responses:
  #       "201":
  #         description: resource is created
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #   put:
  #     summary: update a user's saved search
  #     parameters:
  #       - in: query
  #         name: userId
  #         required: true
  #         schema:
  #           type: string
  #       - in: query
  #         name: searchId
  #         required: true
  #         schema:
  #           type: string
  #       - in: query
  #         name: updatedSearch
  #         required: true
  #         schema:
  #           $ref: "#/components/schemas/SavedSearch"
  #     responses:
  #       "200":
  #         description: returns confirmation message
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #   delete:
  #     summary: deletes a user's search
  #     parameters:
  #       - in: query
  #         name: userId
  #         required: true
  #         schema:
  #           type: string
  #       - in: query
  #         name: searchId
  #         required: true
  #         schema:
  #           type: string
  #     responses:
  #       "200":
  #         description: returns confirmation message
  #         content:
  #           application/json:
  #             schema:
  #               type: object

components:
  schemas:
    QuickViewProperty:
      type: object
      required:
        - propertyId
        - geolocation
        - price
        - bathrooms
        - bedrooms
        - streetAddress
        - zipcode
        - description
        - images
      properties:
        id:
          type: integer
          format: int64
          example: 123456
        geolocation:
          type: string
        price:
          type: number
        bathrooms:
          type: integer
        bedrooms:
          type: integer
        streetAddress:
          type: string
        zipcode:
          type: string
        description:
          type: string
        images:
          type: array
          items:
            type: string
    DetailedProperty:
      description: Details implemented right now in the mock data
      type: object
      required:
        - id
      properties:
        id:
          type: integer
          format: int64
          example: 123456
        price:
          type: number
        bedrooms:
          type: integer
        bathrooms:
          type: integer
        propertyType:
          type: string
          example: apartment
        address:
          type: string
          example: 1424 Karen Spur
        zipcode:
          type: string
        longitude:
          type: string
        latitude:
          type: string
        full_description:
          type: string
        petsAllowed:
          type: boolean
        lastUpdated:
          type: array
          items:
            type: integer
          example: [2023, 8, 30]
        datePosted:
          type: array
          items:
            type: integer
          example: [2023, 8, 30]
        TBDScore:
          type: number
        images:
          type: array
          items:
            type: string
    SavedSearch:
      description: a user can save a search, in order to return to it later
      type: object
      required:
        - id
      properties:
        id:
          type: integer
          format: int64
          example: 123456
        much_more:
          type: string
